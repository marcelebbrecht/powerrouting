Bachelorthesis 2017 - energybased AODV routing, 2nd try
Marcel Ebbrecht, marcel.ebbrecht@googlemail.com, TU Dortmund 2017
Readme, version 0.2

About this stuff: 
	Here I implemented some power based optimizations for using routing protocols
	in manets networks. The Protocol watches the local battery charge and rises the
	hop count based on charge. This should make a fair, power-usage based routing possible
	to ensure fair load balancing, when routing in manets.
	
	For a first proof-of-concept, I modified the AODV modules from inet package. In
	normal AODV scenarios, the battery of the most central nodes, the nodes which provide
	the shortest path, will be highly drained. With AODVPO, the hop count will be raised
	according to battery status, so other routes will be selected and so, other batteries 
	will be drained. The battery status will be watched the whole simulation. If it reaches
	a specific value, the host will send RERR, so that routes through the network will be
	recalculated (and maybe, the host wont be used anymore... or for a while).
	
	I am working on modifying other Protocols. If I got working implementations of OSPF
	or B.A.T.M.A.N for Omnet (the mostly used protocols for manet, example: Freifunk), I'll
	modify them. Otherwise, I'll continue my work on DYMO.
	
	The scenario is limited to 1MBps, ping and 900 seconds. Also, I modified the powerconsumtion
	to reduce the time needed for computation: Power is only used for receiving and transmitting.
	Maybe, I'll switch to a more realistic model. Also, I'll change other things, e.g. radio, medium
	and other stuff to a more realistic version. Maybe. Let's get it on :)

All ned and ini files are located in:
	- inet/PowerRouting2
	
All c++ files are located in:
	- inet/src/inet/node/aodv 
	- inet/src/inet/routing/aodv

Installation:
    1. install inetmanet in workspace, place it as inetmanet
	2. copy the whole inet/PowerRouting2 to your inetmanet tree
	3. copy all ADOVPO* files from
		- inetmanet/src/inet/node/aodvpo 
		- inetmanet/src/inet/routing/aodvpo
	   to the appropriate place in your inetmanet/src tree
	4. build and run configs
	   
Usage:
	available configurations:
		- TestNetworkAODV1S1R for normal behavior
		- TestNetworkAODVPO1S1R for energy optimized behavior
		- TestNetworkAODVPO1S1RTriggerHappy for energy optimized behavior with lower trigger
		- TestNetworkAODVPO1S1RTriggerSloppy for energy optimized behavior with higher trigger
		- TestNetworkAODVPO1S1RMixed - same as TestNetworkAODVPO1S1R, but with normale AODV Nodes
		  to demonstrate compatibility of AODV and AODVPO.
		
	Senders and receivers got infinite power. Also, in mixed configurations, the normal AODV
	routers got infinite power. Infinite powered nodes are shown as cellphones, others as pda.
		
	AODVPO uses the following options on the AODVPO host:
	  aodv.powerSensitivity - This is the sensitivity for raising the new hop-count. Should be
	  						  between 0.1 and 10. BUT: Use values below 1 in smaller networks or
	  						  the routing stops working, because routes exceeds the max hop count.
	  						  Default, and a really good value, is 0.25, if not set.
      aodv.powerBias 		- The bias will allways be added to the hop-count. With this option,
                              battery powered hosts will be less attractive as routers (but they
                              will work, if needed). Default is 0.
      aodv.powerTrigger		- The battery status will be watched the whole simulation. If it reaches
							  a specific value, the host will send RERR, so that routes through the 
							  network will be recalculated. Should be between 0.05 (=5 percent) and
							  0.5 (=50 percent).
	  
	Watch the routing process and log files. All related logging will be done
	with prefix: "Power Routing". Every configuration uses 1 sender and 1 receiver.
	There is also always a config with 2S2R in name, that uses 2 senders and 2 re-
	ceivers. The vizualizer becomes unstable, you can activate it in ini-file, but
	at your own risk.
	
	There is also a bunch of anf files. Open the graph in the dataset 'Capacity' and you will
	get all significant information about hosts batterystatus.

Maybe, the c++ code will be placed in inet/PowerRouting2/src if possible. Most files are
derived from AODV examples or original code. Modifications are marked with:
  'end modification'
  'start modification'

To be continued...