#!/bin/bash
# PowerRouting for OMNeT++ - runfile
# Marcel Ebbrecht, marcel.ebbrecht@googlemail.com
# free software, see LICENSE.md for details

# Warning, written by a "dont-care" bash-hacker with
# a bad attitude - dirty but worky, sorry guys, I
# don't like bash - I love it! So dont study the 
# following code, it will harm your coding skills.
# You habe been warned ;)

### settings ###
# substract from available cores (number >= 0)
COREBIAS=1

# delete elog files (yes,no)
DELETELOGS="yes"

# delete run log files (yes,no)
DELETERUNLOGS="no"

# delete rt files (yes,no)
DELETERTS="yes"

# how many times CPUCOUNT should scave processes be started (number)
SCAVEFACTOR="4"

# how many times CPUCOUNT should gnuplot processes be started (number)
PLOTFACTOR="4"

# filter results (yes,no)
FILTERRESULTS="yes"

# gnuplot path for exporting graphs to png files
GNUPLOT="/c/omnetpp/gnuplot/bin/gnuplot.exe"

### functions ###
# get repeat
# R: NUMBEROFREPETITIONS (number)
function getRepeat {
  if [ $(grep "repeat" ./common.ini | grep "=" | cut -d "=" -f 2 | wc -l) -eq 1 ]; then
    grep "repeat" ./common.ini | grep "=" | cut -d "=" -f 2 | sed 's/ //g'
  else
    echo 1
  fi
}

# estimating thread-count
# 1: verbose (if wanted)
# R: NUMBEROFTHREADS (number)
function estimateThreads {
  CPUCOUNT=$(($(cat /proc/cpuinfo | grep processor | wc -l)-$COREBIAS))
  if [ $CPUCOUNT -le 0 ]; then CPUCOUNT = 1; fi
    if [[ $1 =~ "verbose" ]]; then
    echo
    echo "switching to single thread mode (verbose)"
    CPUCOUNT=1
  else
    echo
    echo "running with $CPUCOUNT threads"
  fi
}

# remove logfiles: elog and rt
function cleanLogs {
  echo
  if [[ "$DELETELOGS" =~ "yes" ]]; then
    echo "Removing elog files."
    rm ./results/*.elog > /dev/null 2>&1
  fi
  if [[ "$DELETERUNLOGS" =~ "yes" ]]; then
    echo "Removing elog files."
    rm ./logs/*.log > /dev/null 2>&1
  fi
  if [[ "$DELETERTS" =~ "yes" ]]; then
    echo "Removing rt files."
    rm ./results/*.rt > /dev/null 2>&1
  fi
}

# wait until last opp_run is finished
function waitForFinish {
  sleep 1
  while [ $(ps aux | grep opp | grep -v grep | wc -l) -ge 1 ]; do sleep 1; done
}

# wait for free slot (num of runnung processes < CPUCOUNT)
function waitForFreeSlot {
  while [ $(ps aux | grep opp | grep -v grep | wc -l) -ge $CPUCOUNT ]; do sleep 1; done  
}

# run single simulation
# 1: CONFIGFILE (filename)
# 2: CONFIGNAME (name)
# 3: verbose (if wanted)
function runSimulation {
  if [[ $3 =~ "verbose" ]]; then
    N=0
    while [ $N -lt $(getRepeat) ]; do
      waitForFreeSlot
      echo "  configuration: $2, run $(($N+1)) of $(getRepeat)"
      opp_run -r $N -m -u Cmdenv \
        -n "../src;../simulations;../../inet/examples;../../inet/showcases;../../inet/src;../../inet/tutorials" --image-path=../../inet/images \
        -l ../src/powerrouting -l ../../inet/src/inet \
        -c $2 ../simulations/$1 2>&1 | tee logs/$2-$N.log && filterResultsVector "results/$2-#$N.vec" && filterResultsScalar "results/$2-#$N.sca" &
      N=$(($N+1))
    done
  else
    N=0
    while [ $N -lt $(getRepeat) ]; do
      waitForFreeSlot
      echo "  configuration: $2, run $(($N+1)) of $(getRepeat)"
      opp_run -r $N -m -u Cmdenv \
        -n "../src;../simulations;../../inet/examples;../../inet/showcases;../../inet/src;../../inet/tutorials" --image-path=../../inet/images \
        -l ../src/powerrouting -l ../../inet/src/inet \
        -c $2 ../simulations/$1 > logs/$2-$N.log 2>&1 && filterResultsVector "results/$2-#$N.vec" && filterResultsScalar "results/$2-#$N.sca" &
      N=$(($N+1))
    done
  fi
  cleanLog $2 > /dev/null 2>&1
}

# run simulation part of study
# 1: CONFIGFILE (filename)
# 2: CONFIGNAME (name)
# 3: NUMBEROFRUN (number)
# 4: NUMBEROFALLRUNS (number) 
function runStudySimulation {
  waitForFreeSlot
  echo "  configuration: $2 ($(($3+1)) of $(($4+1)), log: logs/$2-$3.log)"
  opp_run -r $3 -m -u Cmdenv \
    -n "../src;../simulations;../../inet/examples;../../inet/showcases;../../inet/src;../../inet/tutorials" --image-path=../../inet/images \
    -l ../src/powerrouting -l ../../inet/src/inet \
    -c $2 ../simulations/$1 > logs/$2-$3.log 2>&1 && filterResultsVector "$(getStudyResultName $1 $2 $3).vec" && filterResultsScalar "$(getStudyResultName $1 $2 $3).sca" &
  cleanLog $2 > /dev/null 2>&1
}

# output before run
# 1: SIMULATIONNAME (string)
# R: ECHO TEXT (output)
function runPreamble { 
  echo
  echo "running $1 simulations, please wait ..."
}

# output after run
# 1: SIMULATIONNAME (string)
function runPostamble { 
  echo
  echo "$1 simulations done."
  echo
}

# kill running opp_run processes
function killOppRun {
  echo
  echo "killing all running opp_run processes, please wait..."
  while [[ $(ps aux | grep opp_run | grep -v grep | awk {'print $1'} | wc -l ) -ge 1 ]]; do
    for i in ../simulations/logs/opprun-*.pid; do
	  kill $(cat $i) > /dev/null 2>&1
	done
    for i in $(ps aux | grep opp_run | grep -v grep | awk {'print $1'}); do 
	  kill $i > /dev/null 2>&1
    done
  done
  rm ../simulations/logs/opprun-*.pid > /dev/null 2>&1
  echo "done!"
  echo
}

# write PID to file
# 1: PID (number)
function writePid {
  echo $1 > ../simulations/logs/opprun-$1.pid
}

# delete PID file
# 1: PID (number)
function deletePid {
  rm ../simulations/logs/opprun-$1.pid
}

# estimate number of runs for parameter study
# 1: CONFIGFILE (filename)
# 2: CONFIGNAME (name)
# R: NUMBEROFRUNS (number)
function numberOfRuns {
  RUNNUMS=$(($(opp_run -u Cmdenv \
    -n "../src;../simulations;../../inet/examples;../../inet/showcases;../../inet/src;../../inet/tutorials" --image-path=../../inet/images \
    -l ../src/powerrouting -l ../../inet/src/inet -c $2 ../simulations/$1 -q numruns | grep "Number of runs" | cut -d ":" -f 2 | sed 's/ //g')-1))
  echo $RUNNUMS  
}

# get result name for study case
# 1: CONFIGFILE (filename)
# 2: CONFIGNAME (name)
# 3: NUMBEROFRUN (number)
# R: NAMEOFRESULT (name)
function getStudyResultName {
  SUFFIX=$(opp_run -r $3 -u Cmdenv \
    -n "../src;../simulations;../../inet/examples;../../inet/showcases;../../inet/src;../../inet/tutorials" --image-path=../../inet/images \
    -l ../src/powerrouting -l ../../inet/src/inet -c $2 ../simulations/$1 -q runs | grep "Run " | sed 's/\$//g' | cut -d ":" -f 2 | sed 's/ //g' | sed 's/,repetition=/-#/g')
  echo "results/$2-$SUFFIX"
}

# filter results vector
# 1: FILENAME (file)
function filterResultsVector {
  mkdir -p ./tmp/results > /dev/null 2>&1
  if [[ "$FILTERRESULTS" =~ "yes" ]]; then
    scavetool x -f "name(*Capacity*)" -o tmp/$1 $1 > /dev/null 2>&1
    cp -a tmp/$1 $1 > /dev/null 2>&1
    cleanTemp
  fi
}

# filter results scalar
# 1: FILENAME (file)
function filterResultsScalar {
  mkdir -p ./tmp/results > /dev/null 2>&1
  if [[ "$FILTERRESULTS" =~ "yes" ]]; then
    scavetool x -f "( name("rcvdPk:count") OR name("sentPk:count") )" -o tmp/$1 $1 > /dev/null 2>&1
    cp -a tmp/$1 $1 > /dev/null 2>&1
    cleanTemp
  fi
}

# clean tmp directory
function cleanTemp {
  rm ./tmp/* > /dev/null 2>&1
  rm ./tmp/results/* > /dev/null 2>&1
}

### execution ###
# create directory for logs
mkdir ../simulations/logs > /dev/null 2>&1

# mode switch
case $1 in



  # full set of simulations, except longterm
  aodv)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "aodv.ini" "AODV" $2
    runSimulation "aodv.ini" "AODVPO" $2
    runSimulation "aodv.ini" "AODVPOTriggerHappy" $2
    runSimulation "aodv.ini" "AODVPOTriggerSloppy" $2
    runSimulation "aodv.ini" "AODVPOMixed" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # fast set of simulations, no mixed or trigger modified runs
  aodvfast)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "aodv.ini" "AODV" $2
    runSimulation "aodv.ini" "AODVPO" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # compare set of simulations, no mixed or trigger modified runs
  aodvcompare)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "aodv.ini" "AODVCompareOneToOne" $2
    runSimulation "aodv.ini" "AODVCompareOneToMany" $2
    runSimulation "aodv.ini" "AODVCompareManyToOne" $2
    runSimulation "aodv.ini" "AODVCompareManyToMany" $2
    runSimulation "aodv.ini" "AODVPOCompareOneToOne" $2
    runSimulation "aodv.ini" "AODVPOCompareOneToMany" $2
    runSimulation "aodv.ini" "AODVPOCompareManyToOne" $2
    runSimulation "aodv.ini" "AODVPOCompareManyToMany" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # longterm simulations
  aodvlong)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "aodv.ini" "AODVLong" $2
    runSimulation "aodv.ini" "AODVPOLong" $2
    runSimulation "aodv.ini" "AODVPOLongTriggerHappy" $2
    runSimulation "aodv.ini" "AODVPOLongTriggerSloppy" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # full set of simulations, except longterm
  olsr)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "olsr.ini" "OLSR" $2
    runSimulation "olsr.ini" "OLSRPO" $2
    runSimulation "olsr.ini" "OLSRPOTriggerHappy" $2
    runSimulation "olsr.ini" "OLSRPOTriggerSloppy" $2
    runSimulation "olsr.ini" "OLSRPOMixed" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # fast set of simulations, no mixed or trigger modified runs
  olsrfast)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "olsr.ini" "OLSR" $2
    runSimulation "olsr.ini" "OLSRPO" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # compare set of simulations, no mixed or trigger modified runs
  olsrcompare)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "olsr.ini" "OLSRCompareOneToOne" $2
    runSimulation "olsr.ini" "OLSRCompareOneToMany" $2
    runSimulation "olsr.ini" "OLSRCompareManyToOne" $2
    runSimulation "olsr.ini" "OLSRCompareManyToMany" $2
    runSimulation "olsr.ini" "OLSRPOCompareOneToOne" $2
    runSimulation "olsr.ini" "OLSRPOCompareOneToMany" $2
    runSimulation "olsr.ini" "OLSRPOCompareManyToOne" $2
    runSimulation "olsr.ini" "OLSRPOCompareManyToMany" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # longterm simulations
  olsrlong)
    writePid $$
    runPreamble $1
	estimateThreads $2
    runSimulation "olsr.ini" "OLSRLong" $2
    runSimulation "olsr.ini" "OLSRPOLong" $2
    runSimulation "olsr.ini" "OLSRPOLongTriggerHappy" $2
    runSimulation "olsr.ini" "OLSRPOLongTriggerSloppy" $2
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # run all fast simulations
  fast)
    writePid $$
    $0 aodvfast $2
    $0 olsrfast $2
	deletePid $$
  ;;

  # run all simulations, except longterm
  normal)
    writePid $$
    $0 aodv $2
    $0 olsr $2
	deletePid $$
  ;;

  # run longterm simulations
  long)
    writePid $$
    $0 aodvlong $2
    $0 olsrlong $2
	deletePid $$
  ;;

  # run study simulations
  study)
    writePid $$
    $0 aodvstudy $2
    $0 olsrstudy $2
	deletePid $$
  ;;
  
  # run compare simulations
  compare)
    writePid $$
    $0 aodvcompare $2
    $0 olsrcompare $2
	deletePid $$
  ;;

  # run all simulations
  all)
    writePid $$
    $0 aodv $2
    $0 olsr $2
    $0 aodvlong $2
    $0 olsrlong $2
    $0 aodvcompare $2
    $0 olsrcompare $2
    $0 aodvstudy $2
    $0 olsrstudy $2
	deletePid $$
  ;;
  
  # run single simulation
  config)
    writePid $$
    runPreamble $1
	estimateThreads $4
    runSimulation "$2" "$3" $4
    waitForFinish
    cleanLogs
    runPostamble $1
	deletePid $$
  ;;

  # kill running simulations
  killopp)
    killOppRun
  ;;
  
  aodvstudy)
    writePid $$
    runPreamble $1
	estimateThreads $2
    RUNNUMS=$(numberOfRuns aodv.ini AODVPOParameterStudy)  
    N=0
    rm ./results/AODVPOP* > /dev/null 2>&1
    while [ $N -le $RUNNUMS ]; do
      runStudySimulation "aodv.ini" AODVPOParameterStudy $N $RUNNUMS
      N=$(($N+1))
    done
    waitForFinish    
    cleanLogs
    createCharts AODV
    exportCapacityCsv AODV
    plotCapacityCsv AODV
    createCapacityHtmlReport AODV
    runPostamble $1
	deletePid $$ 
  ;;
  
  olsrstudy)
    writePid $$
    runPreamble $1
	estimateThreads $2
    RUNNUMS=$(numberOfRuns olsr.ini OLSRPOParameterStudy)  
    N=0
    rm ./results/OLSRPOP* > /dev/null 2>&1
    while [ $N -le $RUNNUMS ]; do
      runStudySimulation "olsr.ini" OLSRPOParameterStudy $N $RUNNUMS
      N=$(($N+1))
    done
    waitForFinish       
    cleanLogs
    createCharts OLSR
    exportCapacityCsv OLSR
    plotCapacityCsv OLSR
    createCapacityHtmlReport OLSR
    runPostamble $1
	deletePid $$ 
  ;;
  
  *)
    echo
    echo "usage: ./run [mode] (verbose)"
    echo "  runs designated tests and logs to files (multihreaded),"
    echo "  for logging to screen and files, append 'verbose' (only singlethreaded)"
	echo "  script must be started in directory simulations, you have been warned!"
    echo
    echo "  modes:"
    echo "  all - runs all aodv and olsr simulations"
    echo "  fast - runs all aodv and olsr simulations without longterm, mixed and trigger variants"
    echo "  normal - runs all aodv and olsr simulations without longterm"
    echo "  long - runs all aodv and olsr longterm simulations"
    echo "  study - runs all aodv and olsr simulations with varying parameter"
    echo "  compare - runs all aodv and olsr simulations for comparision"
    echo "  olsr - runs olsr simulations without longterm"
    echo "  aodv - runs aodv simulations without longterm"
    echo "  olsrfast - runs olsr simulations without longterm, mixed and trigger variants"
    echo "  aodvfast - runs aodv simulations without longterm, mixed and trigger variants"
    echo "  olsrlong - runs olsr longterm simulations"
    echo "  aodvlong - runs aodv longterm simulations"
    echo "  olsrcompare - runs olsr simulations for comparision"
    echo "  aodvcompare - runs aodv simulations for comparision"
    echo "  olsrstudy - runs olsr simulations with varying parameter"
    echo "  aodvstudy - runs aodv simulations with varying parameter"
    echo "  killopp - kills all running opp_run processes"
    echo "  config CONFIGFILE CONFIGNAME - runs single simulation CONFIGNAME from CONFIGFILE"
    echo "  help - print this help"
    echo
  ;;

esac
